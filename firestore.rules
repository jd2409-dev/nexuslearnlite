/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles, journal entries, and quiz results.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile data.  Only the user themselves can read/write this data.
 * - /users/{userId}/journalEntries/{entryId}: Stores a user's learning journal entries. Only the user can read/write their own entries.
 * - /users/{userId}/quizResults/{resultId}: Stores the results of quizzes taken by the user. Only the user can read/write their own results.
 *
 * Key Security Decisions:
 * - Users can only access their own data. There are no shared resources or admin roles in this prototype.
 * - Data consistency between the path and the document's internal `userId` field is enforced on create.
 * - Data consistency of the `userId` field is also enforced to be immutable on update.
 * - Listing of documents is allowed for all user-owned subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can create their profile.
     * @allow (get) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can read their profile.
     * @allow (update) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can update their profile.
     * @allow (delete) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can delete their profile.
     * @deny (create) User with ID 'AnotherUserId' cannot create a profile for 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @deny (get) User with ID 'AnotherUserId' cannot read the profile of 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @deny (update) User with ID 'AnotherUserId' cannot update the profile of 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @deny (delete) User with ID 'AnotherUserId' cannot delete the profile of 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to a user's journal entries.
     * @path /users/{userId}/journalEntries/{entryId}
     * @allow (create) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can create a journal entry.
     * @allow (get) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can read their own journal entry.
     * @allow (list) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can list their own journal entries.
     * @allow (update) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can update their own journal entry.
     * @allow (delete) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can delete their own journal entry.
     * @deny (create) User with ID 'AnotherUserId' cannot create a journal entry for 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @deny (get) User with ID 'AnotherUserId' cannot read the journal entry of 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @deny (list) User with ID 'AnotherUserId' cannot list the journal entries of 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @deny (update) User with ID 'AnotherUserId' cannot update the journal entry of 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @deny (delete) User with ID 'AnotherUserId' cannot delete the journal entry of 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @principle Enforces document ownership and validates the 'userId' field.
     */
    match /users/{userId}/journalEntries/{entryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's quiz results.
     * @path /users/{userId}/quizResults/{resultId}
     * @allow (create) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can create a quiz result.
     * @allow (get) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can read their own quiz result.
     * @allow (list) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can list their own quiz results.
     * @allow (update) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can update their own quiz result.
     * @allow (delete) User with ID 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1' can delete their own quiz result.
     * @deny (create) User with ID 'AnotherUserId' cannot create a quiz result for 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @deny (get) User with ID 'AnotherUserId' cannot read the quiz result of 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @deny (list) User with ID 'AnotherUserId' cannot list the quiz results of 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @deny (update) User with ID 'AnotherUserId' cannot update the quiz result of 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @deny (delete) User with ID 'AnotherUserId' cannot delete the quiz result of 'AlxMw8ggbefrPB7bZy7Ufh6Hcxz1'.
     * @principle Enforces document ownership and validates the 'userId' field.
     */
    match /users/{userId}/quizResults/{resultId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}